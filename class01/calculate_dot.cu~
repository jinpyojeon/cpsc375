#include <cuda.h>
#include <stdlib.h>
#include <time.h>
#include <stdio.h>

#define N 512
#define T 1024

__global__ void calculateDot(int* a, int* b, int* result){
	__shared__ int temp[N];
	temp[threadIdx.x] = a[threadIdx.x] * b[threadIdx.x];

	__syncthreads();

	if (0 == threadIdx.x) {
		int sum = 0;
		for (int i = 0; i < N; i++) {
			sum += temp[i];
		}
		*result = sum;
	}

}

void random_ints(int * arr, size_t size){
	int i = 0;
	for (i = 0; i < size; i++) {
		arr[i] = rand() % 100;
	}
}

int main(void) {
	int *a, *b, *c;
	int * d_a, *d_b, *d_c;
	int size = N * sizeof(int);

	cudaMalloc((void**)&d_a, size);
	cudaMalloc((void**)&d_b, size);
	cudaMalloc((void**)&d_c, sizeof(int));

	a = (int *)malloc(size);
	b = (int *)malloc(size);
	c = (int *)malloc(sizeof(int));

	srand(time(NULL));

	random_ints(a, N);
	random_ints(b, N);

	cudaEvent_t start, stop;
	cudaEventCreate(&start);
	cudaEventCreate(&stop);
	cudaEventRecord(start, 0);
	
	
	cudaMemcpy(d_a, a, size, cudaMemcpyHostToDevice);
	cudaMemcpy(d_b, b, size, cudaMemcpyHostToDevice);

	calculateDot<<<1, N>>>(d_a, d_b, d_c);

	cudaMemcpy(c, d_c, sizeof(int), cudaMemcpyDeviceToHost);

	cudaEventRecord(stop, 0);
	cudaEventSynchronize(stop);
	float elapsedTime;
	cudaEventElapsedTime(&elapsedTime, start, stop);
	printf("The elapsed time: %f ms\n", elapsedTime);
	cudaEventDestroy(start);
	cudaEventDestroy(stop);

	printf("The dot product is %d\n", *c);


	free(a); free(b); free(c);
	cudaFree(d_a);
	cudaFree(d_b);
	cudaFree(d_c);

	return 0;
}
